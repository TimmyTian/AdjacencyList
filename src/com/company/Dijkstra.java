package com.company;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.Map;import java.util.NavigableSet;import java.util.Set;import java.util.TreeSet;/** * Created by Hoshiko on 11/19/15. */public class Dijkstra{    public static int [] dijkstra(Graph graph, String startName)    {        HashMap<String, Vertex> vertices = new HashMap<String, Vertex>(graph.getVertices());        ArrayList<Vertex> verticesArr = new ArrayList<Vertex>(vertices.values());        System.out.println("verticesArr " + verticesArr);        if(!vertices.containsKey(startName)) {            System.err.printf("Graph doesn't contain start vertex \"%s\"\n", startName);            return null;        }        final int[] dist = new int[vertices.size()];  // shortest known distance from "startName"        final Vertex[] pred = new Vertex[vertices.size()];  // preceeding node in path        final boolean[] visited = new boolean[vertices.size()]; // all false initially        final Vertex source = vertices.get(startName);        int indexOfSource = verticesArr.indexOf(source);        for(int i = 0; i < dist.length; i++) {            dist[i] = Integer.MAX_VALUE;        }        dist[indexOfSource] = 0;        for(int i = 0; i < dist.length; i++) {            int next = minVertex(dist, visited);            System.out.println("int next = " + next);            Vertex nextV = verticesArr.get(next);            System.out.println("nextV: " + nextV);            visited[next] = true;            Set <Vertex> n  = graph.getNeighbors(nextV.getName());            ArrayList <Vertex> neighborOfNextV = new ArrayList<Vertex>();            neighborOfNextV.addAll(n);            System.out.println("neighborOfNextV"+ neighborOfNextV);            for(int j = 0; j < neighborOfNextV.size(); j++) {                Vertex v3 = neighborOfNextV.get(j);                System.out.println("v3: " + v3);                int v = verticesArr.indexOf(v3);                int d = dist[next] + graph.getWeight(nextV.getName(), v3.getName());                System.out.println("v  " + v);                System.out.println("d  " + d);                if(dist[v] > d) {                    dist[v] = d;                    pred[v] = nextV;                }            }        }        System.out.println("verticesArr " + verticesArr);        System.out.println("pred: " +Arrays.toString(pred));        return dist;  // (ignore pred[s]==0!)    }    private static int minVertex (int [] dist, boolean [] visited) {        int x = Integer.MAX_VALUE;        int y = -1;   // graph not connected, or no unvisited vertices        for (int i = 0 ; i < dist.length ; i++) {            if (!visited[i] && dist[i] < x) {                y=i;                x=dist[i];            }        }        return y;   }}