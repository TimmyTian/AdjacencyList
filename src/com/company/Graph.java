package com.company;import java.util.Collections;import java.util.HashMap;import java.util.Map;import java.util.Set;/*** Created by Hoshiko on 11/15/15.*/public class Graph {    public static Map<String, Vertex> getVertices()    {        return vertices;    }    static Map<String, Vertex> vertices;    public Graph()    {        this.vertices = new HashMap<String, Vertex>();    }    public int size()    {        return vertices.size();    }    public void addVertices(String... names)    {        for(String name : names)        {            addVertex(name);        }    }    public void addVertex(String name) {        vertices.put(name, new Vertex(name));    }    public void addDirectedEdge(String from, String to, int weight){        Vertex v1 = vertices.get(from);        Vertex v2 = vertices.get(to);        if(v1 ==null || v2 ==null) throw new IllegalStateException();        v1.neighborsToWeights.put(v2, weight);    }    public void addUndirectedEdge(String from, String to, int weight){        addDirectedEdge(from, to, weight);        addDirectedEdge(to, from, weight);    }    public Set<Vertex> getNeighbors(String name){        Vertex v = vertices.get(name);        if(v == null)return Collections.EMPTY_SET;        return v.getNeighbors();    }    public int getWeight (String from, String to){        Vertex v1 = vertices.get(from);        Vertex v2 = vertices.get(to);        if(v1 == null || v2 ==null)return -1;        Integer weight = v1.neighborsToWeights.get(v2);        if(weight ==null )return Integer.MAX_VALUE;//return infinity it means no weight        return weight;    }}